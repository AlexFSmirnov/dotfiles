snippet "(\w+).inp" "Input snigle int value" r
`!p snip.rv = match.group(1)` = int(input())
endsnippet
snippet linp "Input many int values separated by spaces"
list(map(int, input().split()))
endsnippet
snippet "(\(.+?\)).inp" "Input multiple values" r
`!p values = match.group(1)[1:-1].split(", ")
indent = int(vim.eval('indent(".")'))
snip.rv = "{} = int(input())\n".format(values[0])
for v in values[1:]:
    snip.rv += "{}{} = int(input())\n".format(' ' * indent, v);
snip.rv = snip.rv[:-1]`
endsnippet

snippet e8 "Encode to UTF-8" i
encode("utf8")$0
endsnippet

snippet d8 "Decode as UTF-8" i
decode("utf8")$0
endsnippet

snippet md5 "Get MD5"
str(md5($1).hexdigest())$0
endsnippet

snippet vimgetrange "Return selected text in vim"
def get_range():
    buf = vim.current.buffer
    (lnum1, col1) = buf.mark('<')
    (lnum2, col2) = buf.mark('>')
    lines = vim.eval('getline({}, {})'.format(lnum1, lnum2))
    if len(lines) == 1:
        lines[0] = lines[0][col1:col2 + 1]
    else:
        lines[0] = lines[0][col1:]
        lines[-1] = lines[-1][:col2 + 1]
    return "\n".join(lines)
$0
endsnippet
